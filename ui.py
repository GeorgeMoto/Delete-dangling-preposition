# ui.py
import os
import threading
import ttkbootstrap as ttk
from tkinter import filedialog, messagebox, StringVar
from ttkbootstrap.constants import *
from config import SHORT_WORDS, save_short_words
from logic import fix_hanging_prepositions
from logger import log_separator  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
import logging


class Application:
    def __init__(self, root):
        self.root = root
        self.root.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—Å—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–≥–æ–≤")
        self.root.geometry("550x600")
        self.root.resizable(True, True)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_var = ttk.DoubleVar()
        self.status_var = StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.files_processed = 0
        self.total_files = 0

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_ui()

    def create_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=BOTH, expand=YES, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        files_frame = ttk.Frame(notebook)
        notebook.add(files_frame, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.Frame(notebook)
        notebook.add(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ù–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.build_files_tab(files_frame)

        # –ù–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.build_settings_tab(settings_frame)

        # –°—Ç–∞—Ç—É—Å–±–∞—Ä –≤–Ω–∏–∑—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        status_frame = ttk.Frame(self.root)
        status_frame.pack(fill=X, pady=(0, 10), padx=10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ttk.Progressbar(
            status_frame,
            variable=self.progress_var,
            mode="determinate",
            bootstyle="success"
        )
        self.progress_bar.pack(fill=X, side=TOP, pady=(0, 5))

        # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç
        status_label = ttk.Label(
            status_frame,
            textvariable=self.status_var,
            font=("Arial", 10)
        )
        status_label.pack(side=LEFT, padx=5)

    def build_files_tab(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            parent,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            font=("Arial", 14, "bold")
        ).pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_frame = ttk.Frame(parent)
        buttons_frame.pack(fill=X, padx=20, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        ttk.Button(
            buttons_frame,
            text="üìÑ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª",
            command=self.select_file,
            bootstyle="primary",
            width=20
        ).pack(side=LEFT, padx=5)

        ttk.Button(
            buttons_frame,
            text="üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
            command=self.select_folder,
            bootstyle="info",
            width=20
        ).pack(side=LEFT, padx=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(parent, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_frame.pack(fill=BOTH, expand=YES, padx=20, pady=10)

        ttk.Label(
            info_frame,
            text=(
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–º–µ–Ω—è–µ—Ç –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ –∏ —Å–æ—é–∑–æ–≤\n"
                "–Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å '–≤–∏—Å—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–≥–æ–≤'\n"
                "–≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏. –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'output_files'."
            ),
            font=("Arial", 10),
            justify="left"
        ).pack(pady=10, padx=10)

    def build_settings_tab(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            parent,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ –∏ —Å–æ—é–∑–æ–≤",
            font=("Arial", 14, "bold")
        ).pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=BOTH, expand=YES, padx=20, pady=10)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        list_frame = ttk.LabelFrame(main_frame, text="–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ –∏ —Å–æ—é–∑–æ–≤")
        list_frame.pack(side=LEFT, fill=BOTH, expand=YES, padx=(0, 10))

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–≥–æ–≤
        self.words_listbox = ttk.Treeview(
            list_frame,
            columns=("word",),
            show="headings",
            height=15
        )
        self.words_listbox.heading("word", text="–°–ª–æ–≤–æ")
        self.words_listbox.column("word", width=100)
        self.words_listbox.pack(fill=BOTH, expand=YES, padx=5, pady=5)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(
            list_frame,
            orient=VERTICAL,
            command=self.words_listbox.yview
        )
        scrollbar.pack(side=RIGHT, fill=Y)
        self.words_listbox.configure(yscrollcommand=scrollbar.set)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
        for word in sorted(SHORT_WORDS):
            self.words_listbox.insert("", END, values=(word,))

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(side=LEFT, fill=Y, padx=(0, 5))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        self.new_word_var = StringVar()
        ttk.Label(
            buttons_frame,
            text="–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ:"
        ).pack(anchor=W, pady=(0, 5))

        ttk.Entry(
            buttons_frame,
            textvariable=self.new_word_var,
            width=15
        ).pack(fill=X, pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        ttk.Button(
            buttons_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å",
            command=self.add_word,
            bootstyle="success",
            width=15
        ).pack(fill=X, pady=5)

        ttk.Button(
            buttons_frame,
            text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ",
            command=self.delete_word,
            bootstyle="danger",
            width=15
        ).pack(fill=X, pady=5)

        ttk.Separator(buttons_frame, orient=HORIZONTAL).pack(fill=X, pady=10)

        ttk.Button(
            buttons_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            command=self.save_changes,
            bootstyle="primary",
            width=15
        ).pack(fill=X, pady=5)

    def add_word(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫."""
        word = self.new_word_var.get().strip().lower()
        if not word:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
        existing_words = [self.words_listbox.item(item)["values"][0] for item in self.words_listbox.get_children()]
        if word in existing_words:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –≤ –Ω–∞–±–æ—Ä
        self.words_listbox.insert("", END, values=(word,))
        SHORT_WORDS.add(word)
        self.new_word_var.set("")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞

    def delete_word(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞."""
        selected = self.words_listbox.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        word = self.words_listbox.item(selected[0])["values"][0]
        self.words_listbox.delete(selected[0])
        SHORT_WORDS.discard(word)

    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤."""
        if save_short_words(SHORT_WORDS):
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")

    def select_file(self):
        """–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ .docx —Ñ–∞–π–ª–∞."""
        try:
            file_path = filedialog.askopenfilename(filetypes=[("Word Documents", "*.docx")])
            if file_path:
                self.process_files([file_path])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª: {e}")

    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å .docx —Ñ–∞–π–ª–∞–º–∏."""
        try:
            folder_path = filedialog.askdirectory()
            if folder_path:
                docx_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if f.endswith(".docx")]
                if not docx_files:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –ø–∞–ø–∫–µ –Ω–µ—Ç .docx —Ñ–∞–π–ª–æ–≤")
                    return
                self.process_files(docx_files)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏: {e}", exc_info=True)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É: {e}")

    def update_progress(self, file_progress):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã + –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ) / –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤
        overall_progress = (self.files_processed + file_progress) / self.total_files
        self.progress_var.set(overall_progress * 100)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        current_file = self.files_processed + 1
        self.status_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {current_file} –∏–∑ {self.total_files} ({int(file_progress * 100)}%)")

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.root.update_idletasks()

    def process_worker(self, files, output_dir):
        """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        errors = []
        successful_files = 0

        for i, file_path in enumerate(files):
            output_path = os.path.join(output_dir, os.path.basename(file_path))

            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_path}")

                # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                self.root.after(0, lambda i=i: self.status_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i + 1} –∏–∑ {len(files)}"))

                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                fix_hanging_prepositions(
                    file_path,
                    output_path,
                    lambda p, i=i: self.root.after(0, lambda: self.update_progress(i, p, len(files)))
                )

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                successful_files += 1

                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {output_path}")

            except FileNotFoundError as e:
                error_message = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                errors.append(error_message)
                logging.error(error_message)

            except PermissionError as e:
                error_message = f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏–ª–∏ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {file_path}"
                errors.append(error_message)
                logging.error(error_message)

            except Exception as e:
                error_message = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                errors.append(error_message)
                logging.error(error_message, exc_info=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        self.root.after(0, lambda: self.processing_complete(successful_files, errors))

    def update_progress(self, file_index, file_progress, total_files):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: (—Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ + –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ) / –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤
        overall_progress = (file_index + file_progress) / total_files
        self.progress_var.set(overall_progress * 100)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        current_file = file_index + 1
        self.status_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {current_file} –∏–∑ {total_files} ({int(file_progress * 100)}%)")

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.root.update_idletasks()

    def processing_complete(self, successful_files, errors):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤."""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if len(errors) > 0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ —Ñ–∞–π–ª—ã
            if successful_files > 0:
                message = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {successful_files} —Ñ–∞–π–ª–æ–≤\n\n–û—à–∏–±–∫–∏ ({len(errors)}):\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –æ–∫–Ω–æ
                for i, error in enumerate(errors[:3]):
                    message += f"\n{i + 1}. {error}"
                if len(errors) > 3:
                    message += f"\n\n...–∏ –µ—â—ë {len(errors) - 3} –æ—à–∏–±–æ–∫. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ."

                messagebox.showwarning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏", message)
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã. –û—à–∏–±–æ–∫: {len(errors)}")
        else:
            # –ï—Å–ª–∏ –≤—Å—ë —É—Å–ø–µ—à–Ω–æ
            messagebox.showinfo("‚úÖ –ì–æ—Ç–æ–≤–æ!", f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {successful_files}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_var.set(0)

    def process_files(self, files):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ output_files/."""
        if not files:
            return

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        output_dir = os.path.join(os.path.dirname(files[0]), "output_files")
        os.makedirs(output_dir, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_var.set(0)
        self.files_processed = 0
        self.total_files = len(files)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_var.set(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ {len(files)} —Ñ–∞–π–ª–æ–≤...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        worker_thread = threading.Thread(
            target=self.process_worker,
            args=(files, output_dir),
            daemon=True
        )
        worker_thread.start()


def run_ui():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    root = ttk.Window(themename="superhero")  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
    app = Application(root)
    root.mainloop()